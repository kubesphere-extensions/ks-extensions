global:
  namespace:

fullnameOverride:

Master:
  StatefulSet:
    Enabled: false
    Replicas: 1
    # StatefulSetUpdateStrategy must be 'RollingUpdate' or 'OnDelete'
    UpdateStrategy: RollingUpdate
    # Name of the Kubernetes scheduler to use
    SchedulerName: ""
  Name: jenkins-master
  image:
    registry: docker.io
    repository: kubesphere/devops-jenkins
    tag: v4.1.2-2.346.3
    pullPolicy: IfNotPresent
    pullSecrets: []
  Component: "jenkins-master"
  UseSecurity: true
  HostNetworking: false
  AdminUser: admin
  # AdminPassword: yourPasword
    # the api-token length must be 34, and must start with HashVersion: 11, and must match pattern[a-f0-9]{32}
    # https://github.com/jenkinsci/jenkins/blob/1fb76cbe7080e4697964729827be3bd6b099983d/core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java#L203C14-L203C26
    # https://github.com/jenkinsci/jenkins/blob/1fb76cbe7080e4697964729827be3bd6b099983d/core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java#L190
  # AdminApiToken: 11596e09b62dc1f48fee868179dcd55126
  resources:
    requests:
      cpu: 100m
      memory: 6Gi
    limits:
      cpu: 2
      memory: 6Gi

  UsePodSecurityContext: true
  JavaOpts: |-
    -XX:InitialRAMPercentage=70 -XX:MaxRAMPercentage=70
    -Dhudson.slaves.NodeProvisioner.initialDelay=20
    -Dhudson.slaves.NodeProvisioner.MARGIN=50
    -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85
    -Dhudson.model.LoadStatistics.clock=5000
    -Dhudson.model.LoadStatistics.decay=0.2
    -Dhudson.slaves.NodeProvisioner.recurrencePeriod=5000
    -Dhudson.security.csrf.DefaultCrumbIssuer.EXCLUDE_SESSION_ID=true
    -Dhudson.plugins.git.GitStatus.NOTIFY_COMMIT_ACCESS_CONTROL=disabled
    -Dio.jenkins.plugins.casc.ConfigurationAsCode.initialDelay=10000
    -Djenkins.install.runSetupWizard=false
    -XX:+AlwaysPreTouch
    -XX:+HeapDumpOnOutOfMemoryError
    -XX:+UseG1GC
    -XX:+UseStringDeduplication
    -XX:+ParallelRefProcEnabled
    -XX:+DisableExplicitGC
    -XX:+UnlockDiagnosticVMOptions
    -XX:+UnlockExperimentalVMOptions

  ServicePort: 80
  ServiceType: NodePort
  NodePort: 30180
  ServiceAnnotations: {}

  HostName: devops-jenkins.kubesphere-devops-system.svc

  HealthProbes: true
  HealthProbesLivenessTimeout: 90
  HealthProbeLivenessFailureThreshold: 12
  HealthProbesReadinessTimeout: 38
  HealthProbesReadinessFailureThreshold: 12
  HealthProbesReadinessPeriodSeconds: 2
  HealthProbesReadinessTimeoutSeconds: 2
  SlaveListenerPort: 50000
  DisabledAgentProtocols:
    - JNLP-connect
    - JNLP2-connect
  CSRF:
    DefaultCrumbIssuer:
      Enabled: true
      ProxyCompatability: true
  CLI: false
  # Kubernetes service type for the JNLP slave service
  # SETTING THIS TO "LoadBalancer" IS A HUGE SECURITY RISK: https://github.com/kubernetes/charts/issues/1341
  SlaveListenerServiceType: ClusterIP
  SlaveListenerServiceAnnotations: {}
  LoadBalancerSourceRanges:
  - 0.0.0.0/0

  ContainerEnv:
    CASC_JENKINS_CONFIG: "/var/jenkins_home/casc_configs/"
    CASC_MERGE_STRATEGY: override
    kubernetes.connection.timeout: "60000"
    kubernetes.request.timeout: "60000"

  # smtp server settings for notification
  smtp:
    EMAIL_SMTP_HOST: "mail.example.com"
    EMAIL_SMTP_PORT: "465"
    EMAIL_USE_SSL: false
    EMAIL_FROM_NAME: "KubeSphere"
    EMAIL_FROM_ADDR: "admin@example.com"
    EMAIL_FROM_PASS: "P@ssw0rd"

  # sonarQube settings
  sonarqube:
    runnerVersion: "3.3.0.1492"
    serverUrl: ""
    authToken: ""


  InitScripts:
    Mailer: |-
      import jenkins.model.*

      def env = System.getenv()

      def emailFromName = env.EMAIL_FROM_NAME
      def emailFromAddr = env.EMAIL_FROM_ADDR

      def locationConfig = JenkinsLocationConfiguration.get()
      locationConfig.adminAddress = "${emailFromName} <${emailFromAddr}>"
      locationConfig.save()

      def mailer = Jenkins.instance.getDescriptor("hudson.tasks.Mailer")
      mailer.setSmtpAuth(emailFromAddr, env.EMAIL_FROM_PASS)
      mailer.setReplyToAddress("no-reply@k8s.kubesphere.io")
      mailer.setSmtpHost(env.EMAIL_SMTP_HOST)
      mailer.setUseSsl(env.EMAIL_USE_SSL.toBoolean())
      mailer.setSmtpPort(env.EMAIL_SMTP_PORT)
      mailer.save()

    K8sCredentials: |-
      import com.cloudbees.plugins.credentials.CredentialsScope
      import com.cloudbees.plugins.credentials.SystemCredentialsProvider
      import com.cloudbees.plugins.credentials.domains.Domain
      import org.csanchez.jenkins.plugins.kubernetes.ServiceAccountCredential

      def addKubeCredential(String credentialId) {
        def kubeCredential = new ServiceAccountCredential(CredentialsScope.GLOBAL, credentialId, 'Kubernetes service account')
        SystemCredentialsProvider.getInstance().getStore().addCredentials(Domain.global(), kubeCredential)
      }

      addKubeCredential('k8s-service-account')
    RBAC: |-
      import hudson.*
      import hudson.model.*
      import hudson.security.*
      import jenkins.*
      import jenkins.model.*
      import java.util.*
      import com.michelin.cio.hudson.plugins.rolestrategy.*
      import java.lang.reflect.*
      import com.synopsys.arc.jenkins.plugins.rolestrategy.*

      def env = System.getenv()

      // Roles
      def globalRoleRead = "kubesphere-user"
      def globalRoleAdmin = "admin"
      def ldapUserNameAdmin = "admin"

      def jenkinsInstance = Jenkins.getInstance()
      def currentAuthenticationStrategy = Hudson.instance.getAuthorizationStrategy()
      if (currentAuthenticationStrategy instanceof RoleBasedAuthorizationStrategy) {
        println "Role based authorisation already enabled."
        println "Exiting script..."
        return
      } else {
          println "Enabling role based authorisation strategy..."
      }

      // Set new authentication strategy
      RoleBasedAuthorizationStrategy roleBasedAuthenticationStrategy = new RoleBasedAuthorizationStrategy()
      jenkinsInstance.setAuthorizationStrategy(roleBasedAuthenticationStrategy)

      Constructor[] constrs = Role.class.getConstructors();
      for (Constructor<?> c : constrs) {
          c.setAccessible(true);
      }

      // Make the method assignRole accessible
      Method assignRoleMethod = RoleBasedAuthorizationStrategy.class.getDeclaredMethod("assignRole", RoleType.class, Role.class, String.class);
      assignRoleMethod.setAccessible(true);

      // Create admin set of permissions
      Set<Permission> adminPermissions = new HashSet<Permission>();
      adminPermissions.add(Permission.fromId("hudson.model.View.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Connect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Delete"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.ManageDomains"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Build"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Configure"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Administer"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Cancel"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.View"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Build"));
      adminPermissions.add(Permission.fromId("hudson.scm.SCM.Tag"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Discover"));
      adminPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Move"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Workspace"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Read"));
      adminPermissions.add(Permission.fromId("hudson.model.View.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Item.Delete"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Configure"));
      adminPermissions.add(Permission.fromId("com.cloudbees.plugins.credentials.CredentialsProvider.Create"));
      adminPermissions.add(Permission.fromId("hudson.model.Computer.Disconnect"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Update"));
      adminPermissions.add(Permission.fromId("hudson.model.Run.Replay"));

      // Create the admin Role
      Role adminRole = new Role(globalRoleAdmin, adminPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, adminRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, adminRole, ldapUserNameAdmin);
      println "Admin role created...OK"

      /// Read access for authenticated users
      // Create permissions
      Set<Permission> authenticatedPermissions = new HashSet<Permission>();
      authenticatedPermissions.add(Permission.fromId("hudson.model.Hudson.Read"));

      Role authenticatedRole = new Role(globalRoleRead, authenticatedPermissions);
      roleBasedAuthenticationStrategy.addRole(RoleType.Global, authenticatedRole);

      // Assign the role
      roleBasedAuthenticationStrategy.assignRole(RoleType.Global, authenticatedRole, 'authenticated');
      println "Read role created...OK"

      // Save the state
      println "Saving changes."
      jenkinsInstance.save()
    Users: |-
      import jenkins.model.Jenkins
      import jenkins.security.ApiTokenProperty
      import hudson.security.HudsonPrivateSecurityRealm
      import hudson.model.User

      def adminUsername = System.getenv('ADMIN_USER')
      def adminPassword = System.getenv('ADMIN_PASSWORD')
      def adminToken = System.getenv('ADMIN_TOKEN')

      def adminUser = User.getById(adminUsername, false)
      // avoid reset the user
      if (adminUser == null) {
        def hudsonRealm = new HudsonPrivateSecurityRealm(false)
        adminUser = hudsonRealm.createAccount(adminUsername, adminPassword)

        def instance = Jenkins.get()
        instance.setSecurityRealm(hudsonRealm)
        instance.save()
      }

      def adminTokenName = 'ks-devops'
      def adminTokenExist = false

      def adminTokenProperty = adminUser.getProperty(ApiTokenProperty.class)
      def adminTokenList = adminTokenProperty.tokenStore.tokenList
      if (adminTokenList.size > 0) {
        for(int i = 0; i < adminTokenList.size; i++){
          if (adminTokenList[i].name == adminTokenName) {
            adminTokenExist = true
          }
        }
      }
      // avoid re-create the api-token
      if(!adminTokenExist) {
        adminTokenProperty.tokenStore.addFixedNewToken(adminTokenName, adminToken)
      }

    Sonarqube: |-
      import hudson.model.*
      import jenkins.model.*
      import hudson.plugins.sonar.*
      import hudson.plugins.sonar.model.TriggersConfig
      import hudson.tools.*


      def env = System.getenv()
      def instance = Jenkins.getInstance()
      // Check sonarqube enable
      if (env['SONAR_ENABLED'] == null || !env['SONAR_ENABLED'].toBoolean()) {
          println "--> SonarQube Disabled"
          return
      }

      def sonar_server_url = env['SONAR_SERVER_URL']
      def sonar_auth_token = env['SONAR_AUTH_TOKEN']
      def sonar_plugin_version = env['SONAR_PLUGIN_VERSION']
      def sonar_additional_props = env['SONAR_ADDITIONAL_PROPS']


      def SonarGlobalConfiguration sonar_conf = instance.getDescriptor(SonarGlobalConfiguration.class)

      def sonar_inst = new SonarInstallation(
              "sonar", // Name
              sonar_server_url,
              sonar_auth_token,
              sonar_plugin_version,
              sonar_additional_props,
              new TriggersConfig(),
              "" // Additional Analysis Properties
      )

      def sonar_installations = sonar_conf.getInstallations()
      def sonar_inst_exists = false
      def sonar_exists_index = 0
      sonar_installations.eachWithIndex {
          it, index ->
          installation = (SonarInstallation) it
          if (sonar_inst.getName() == installation.getName()) {
            sonar_inst_exists = true
            sonar_exists_index = index
            println("Found existing installation: " + installation.getName() + " : " +index)
          }
      }

      if (sonar_inst_exists) {
          sonar_installations[sonar_exists_index] = sonar_inst
          sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
          sonar_conf.save()
      }else{
          sonar_installations += sonar_inst
          sonar_conf.setInstallations((SonarInstallation[]) sonar_installations)
          sonar_conf.save()
      }


      def sonar_runner_version = env['SONAR_RUNNER_VERSION']

      println "--> Configuring SonarRunner"
      def desc_SonarRunnerInst = instance.getDescriptor("hudson.plugins.sonar.SonarRunnerInstallation")

      def sonarRunnerInstaller = new ZipExtractionInstaller('',"http://uc-jenkins-update-center/sonar-scanner-cli/sonar-scanner-cli-"+sonar_runner_version+".zip","sonar-scanner-"+sonar_runner_version)
      def installSourceProperty = new InstallSourceProperty([sonarRunnerInstaller])
      def sonarRunner_inst = new SonarRunnerInstallation("sonar", "", [installSourceProperty])

      def sonar_runner_installations = desc_SonarRunnerInst.getInstallations()
      def sonar_runner_inst_exists = false
      def sonar_runner_exists_index = 0
      sonar_runner_installations.eachWithIndex {
          it, index ->
          installation = (SonarRunnerInstallation) it
          if (sonarRunner_inst.getName() == installation.getName()) {
              sonar_runner_inst_exists = true
              sonar_runner_exists_index = index
              println("Found existing installation: " + installation.getName())
          }
      }

      if (sonar_runner_inst_exists) {
          sonar_runner_installations[sonar_runner_exists_index] = sonarRunner_inst
          desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
          desc_SonarRunnerInst.save()
      } else{
          sonar_runner_installations += sonarRunner_inst
          desc_SonarRunnerInst.setInstallations((SonarRunnerInstallation[]) sonar_runner_installations)
          desc_SonarRunnerInst.save()
      }

      // Save the state
      instance.save()

  CustomConfigMap: false
  # By default, the configMap is only used to set the initial config the first time
  # that the chart is installed.  Setting `OverwriteConfig` to `true` will overwrite
  # the jenkins config with the contents of the configMap every time the pod starts.
  OverwriteConfig: false
  # Node labels and tolerations for pod assignment
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#nodeselector
  # ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#taints-and-tolerations-beta-feature
  NodeSelector: {}
  Tolerations: {}
  PodAnnotations: {}

  Ingress:
    TLS:
    # - secretName: jenkins.cluster.local
    #   hosts:
    #     - jenkins.cluster.local

Agent:
  Enabled: true
  image:
    registry: docker.io
    repository: jenkins/inbound-agent
    tag: 4.10-2
    pullPolicy: IfNotPresent
    pullSecrets: []
  CustomJenkinsLabels: []
  Component: "jenkins-inbound-agent"
  Privileged: false
  WorkerNamespace: kubesphere-devops-worker
  ResourceQuota:
    Enabled: false
  resources:
    requests:
      cpu: "200m"
      memory: "256Mi"
    limits:
      cpu: "200m"
      memory: "256Mi"
  # Controls how agent pods are retained after the Jenkins build completes
  # Possible values: Always, Never, OnFailure
  PodRetention: Never
  # You can define the volumes that you want to mount for this container
  # Allowed types are: ConfigMap, EmptyDir, HostPath, Nfs, Pod, Secret
  # Configure the attributes as they appear in the corresponding Java class for that type
  # https://github.com/jenkinsci/kubernetes-plugin/tree/master/src/main/java/org/csanchez/jenkins/plugins/kubernetes/volumes
  volumes:
  # - type: Secret
  #   secretName: mysecret
  #   mountPath: /var/myapp/mysecret
  NodeSelector: {}
  # Key Value selectors. Ex:
  # jenkins-agent: v1

  builder:
    # containerRuntime: docker # Available values: docker, podman
    image:
      registry: docker.io
      pullPolicy: IfNotPresent
      pullSecrets: []
    base:
      repository: kubesphere/builder-base
      tag: v3.2.2
    nodejs:
      repository: kubesphere/builder-nodejs
      tag: v3.2.0
    maven:
      repository: kubesphere/builder-maven
      tag: v3.2.0
    golang:
      repository: kubesphere/builder-go
      tag: v3.2.0
    golang16:
      repository: kubesphere/builder-go
      tag: v3.2.2-1.16
    golang17:
      repository: kubesphere/builder-go
      tag: v3.2.2-1.17
    golang18:
      repository: kubesphere/builder-go
      tag: v3.2.2-1.18
    python:
      repository: kubesphere/builder-python
      tag: v3.2.0
    mavenjdk11:
      repository: kubesphere/builder-maven
      tag: v3.2.1-jdk11

persistence:
  enabled: true
  size: 16Gi
  storageClass: ""
  accessMode: ReadWriteOnce
#  existingClaim: ""

  annotations: {}
  volumes:
    - name: casc-config
      configMap:
        name: jenkins-casc-config
  mounts:
    - name: casc-config
      mountPath: /var/jenkins_home/casc_configs
      readOnly: true

NetworkPolicy:
  # Enable creation of NetworkPolicy resources.
  Enabled: false
  # For Kubernetes v1.4, v1.5 and v1.6, use 'extensions/v1beta1'
  # For Kubernetes v1.7, use 'networking.k8s.io/v1'
  ApiVersion: networking.k8s.io/v1

## Install Default RBAC roles and bindings
rbac:
  install: true
  serviceAccountName: default
  # Role reference
  roleRef: cluster-admin
  # Role kind (RoleBinding or ClusterRoleBinding)
  roleBindingKind: ClusterRoleBinding

securityRealm:
  type: openIdConnect # support values include local, ldap, openIdConnect
  ldap:
    host: openldap.kubesphere-system.svc:389
  openIdConnect:
    clientId: "jenkins"
    clientSecret: "jenkins"
    scopes:
      - openid
      - profile
      - email
    fullNameFieldName: url
    userNameField: preferred_username
    kubesphereCoreApi: "http://ks-apiserver.kubesphere-system.svc:30880"
    jenkinsURL: "http://devops-jenkins:30180"

ksAuth:
  enabled: false
  #server: ""

# Install service monitor
prometheus:
  namespace: "kubesphere-monitoring-system"
  serviceMonitor:
    disabled: false
    labels:
      app.kubernetes.io/vendor: kubesphere
  prometheusRule:
    disabled: true
    labels:
      custom-alerting-rule-level: cluster
      role: thanos-alerting-rules
      thanosruler: thanos-rule
    alertRules: []
  alertRuleGroup:
    disabled: false

casc:
  annotations:
    devops.kubesphere.io/jenkins-config-customized: 'true'
    devops.kubesphere.io/jenkins-config-formula: custom
