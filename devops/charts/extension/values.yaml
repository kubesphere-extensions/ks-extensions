global:
  namespace: "kubesphere-devops-system"
  imageRegistry:
  imagePullSecrets: []

replicaCount: 1
autoscaling:
  enabled: false

nameOverride: devops
fullnameOverride: ""

indexJsContent: >
  System.register([],(function(e,t){return{execute:function(){e(function(){var e={386:function(e,t,r){var n=r(149).R;t.s=function(e){if(e||(e=1),!r.y.meta||!r.y.meta.url)throw console.error("__system_context__",r.y),Error("systemjs-webpack-interop was provided an unknown SystemJS context. Expected context.meta.url, but none was provided");r.p=n(r.y.meta.url,e)}},149:function(e,t,r){function n(e,t){var r=document.createElement("a");r.href=e;for(var n="/"===r.pathname[0]?r.pathname:"/"+r.pathname,o=0,i=n.length;o!==t&&i>=0;){"/"===n[--i]&&o++}if(o!==t)throw Error("systemjs-webpack-interop: rootDirectoryLevel ("+t+") is greater than the number of directories ("+o+") in the URL path "+e);var c=n.slice(0,i+1);return r.protocol+"//"+r.host+c}t.R=n;var o=Number.isInteger||function(e){return"number"==typeof e&&isFinite(e)&&Math.floor(e)===e}}},r={};function n(t){var o=r[t];if(void 0!==o)return o.exports;var i=r[t]={exports:{}};return e[t](i,i.exports,n),i.exports}n.y=t,n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},function(){var e;n.g.importScripts&&(e=n.g.location+"");var t=n.g.document;if(!e&&t&&(t.currentScript&&(e=t.currentScript.src),!e)){var r=t.getElementsByTagName("script");r.length&&(e=r[r.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=e}();var o={};return(0,n(386).s)(1),function(){"use strict";n.r(o);const e={menus:[{parent:"workspace",name:"devops",ksModule:"devops",title:"DEVOPS_PROJECT_PL",icon:"strategy-group",order:1,desc:"DEVOPS_DESCRIPTION",skipAuth:!0}]};o.default=e}(),o}())}}}));

apiserver:
  replicas: 1
  image:
    registry: docker.io
    repository: kubesphere/devops-apiserver
    tag: v4.1.2
    pullPolicy: IfNotPresent
    pullSecrets: []
  resources:
    limits:
      cpu: 500m
      memory: 1024Mi
    requests:
      memory: 128Mi
      cpu: 100m
  podAnnotations: {}
  podSecurityContext: {}
  # fsGroup: 2000
  securityContext: {}
    # capabilities:
    #   drop:
    #   - ALL
    # readOnlyRootFilesystem: true
    # runAsNonRoot: true
  # runAsUser: 1000
  nodeSelector: {}
  tolerations: []
  affinity: {}

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: "devops"

authentication:
  # If not set, jwt tools will generate and set it automatically
  jwtSecret: "UDjssmmDgxZtkXVDSeFvBtsZeBSFWhJ6"

jenkins:
  enabled: true
  fullnameOverride: devops-jenkins
  Master:
    AdminUser: admin
    UseSecurity: true
    # AdminPassword: yourPasword
      # the api-token length must be 34, and must start with HashVersion: 11, and must match pattern[a-f0-9]{32}
      # https://github.com/jenkinsci/jenkins/blob/1fb76cbe7080e4697964729827be3bd6b099983d/core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java#L203C14-L203C26
      # https://github.com/jenkinsci/jenkins/blob/1fb76cbe7080e4697964729827be3bd6b099983d/core/src/main/java/jenkins/security/apitoken/ApiTokenStore.java#L190
    # AdminApiToken: 11596e09b62dc1f48fee868179dcd55126
  Agent:
    WorkerNamespace: kubesphere-devops-worker

argocd:
  enabled: true
  namespace: argocd
